define id := fun (A : Type) (x : A) => x.

assume False : forall P:Type, P.

assume True : forall P:Type, P -> P.



data list (A++ :Type) : Type := | nil : list A | cons : A -> list A -> list A.

data nat : Type := O : nat | S : nat -> nat.

data vec (A @ :Type) : nat -> Type := | vnil : vec A O | vcons : forall n : nat,
A -> vec A n -> vec A (S n).


define t1 := fun (A : Type) (x y : A) (z : A) (_ : A) => z.

define t2 := forall A : Type, forall (x:A) (y:A), A.

define t3 := case x of x y => Prop end.

define t4 := < <Type> case x1 of O => nat | S _ => Type end >
             case x1 := x in [] nat x (forall x:A, x) where of
             | O => O
             | S y => Prop
             end.

assume t5 : Type0 -> Type1 -> (Type2 -> Type3) -> Type4.

define t6 := fix 1 pred : nat -> nat :=
               fun x : nat => < nat > case x of
                                      | O => O
                                      | S y => y
                                      end.

define t7 := fun (x:nat) => nat -> nat.