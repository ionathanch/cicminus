data option (A++: Type): Type :=
| some: A -> option A.

-- This would be fine
fixpoint recopt (o: option nat*): nat* :=
    <option nat>
    case o of
    | some n =>
        (<nat>
        case n of
        | O => O
        | S m => S (recopt (some nat m))
        end)
    end.

fixpoint recopt' (o: option nat*): nat* :=
    <option nat>
    case o of
    | some n =>
        (<nat>
        case n of
        | O => O
        | S m => S
            (<nat>
            case m of
            | O => O
            | S x => (recopt' (some nat (S (recopt' (some nat x)))))
            end)
        end)
    end.

-- recopt':                                         option nat<i> -> nat<i>
-- x:                                               nat<s1>
-- some nat:                                        nat<s2> -> option nat<s2>
-- some nat x:                                      option nat<s2>                      nat<s1> <= nat<s2>
-- recopt' (some nat x):                            nat<i>                              option nat<s2> <= option nat<i>
-- S:                                               nat<s3> -> nat<s3+1>
-- S (recopt' (some nat x))                         nat<s3+1>                           nat<i> <= nat<s3>
-- some nat:                                        nat<s4> -> option nat<s4>
-- some nat (S (recopt' (some nat x)))              option nat<s4>                      nat<s3+1> <= nat<s4>
-- recopt' (some nat (S (recopt' (some nat x))))    option nat<i>                       option nat<s4> <= option nat<i>
