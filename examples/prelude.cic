define id := fun (A : Type) (x : A) => x.

assume False : forall P:Type, P.

assume True : forall P:Type, P -> P.


data list (A:Type) : Type := | nil : list A -- firs constructor
                             | cons : A -> list A -> list A. -- second

data nat : Type := O : nat | S : nat -> nat.

data vec (A:Type) : nat -> Type :=
| vnil : vec A O
| vcons : forall n : nat, A -> vec A n -> vec A (S n).

define plus : nat -> nat -> nat :=
   fix 1 plus : nat* -> nat -> nat :=
     fun (m n : nat) => < nat >
                        case m of
                        | O => n
                        | S m' => S (plus m' n)
                        end.

define mult : nat -> nat -> nat :=
   fix 1 mult : nat* -> nat -> nat :=
     fun (m n : nat) => < nat >
                        case m of
                        | O => O
                        | S m' => plus n (mult m' n)
                        end.

define fact : nat -> nat :=
  fix 1 fact : nat* -> nat :=
    fun m : nat => < nat >
                   case m of
                   | O => 1
                   | S m' => mult (fact m') m
                   end.

define vtail := fun (A : Type) (n : nat) (v : vec A (S n)) =>
                < vec A n0 >
                case v1 := v in [(n0 : nat)] vec (S n0) of
                | vcons n1 h1 t1 => t1
                end.

define vhead := fun (A : Type) (n : nat) (v : vec A (S n)) =>
                < A >
                case v1 := v in [(n0 : nat)] vec (S n0) of
                | vcons _ h1 _ => h1
                end.

check fun (A : Type) => vnil A.

check fun (A : Type) (m n : nat) (v : vec A n) (x : A)  => vcons A n x v.

check vtail.

check vhead.
