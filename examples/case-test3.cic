-- data nat : Type := O : nat | S : nat -> nat.

data leq : nat -> nat -> Type :=
| lO : forall x:nat. leq O x
| lS : forall (x y : nat). leq x y -> leq (S x) (S y).


fixpoint leq_trans (m:nat) (n k : nat) (H1 : leq m n) {rec H1}: leq n k -> leq m k :=
    < leq n1 k -> leq m1 k >
    case H1_ := H1 in leq m1 n1 of
    | lO x => fun _ : leq x k => lO k
    | lS x y H =>  fun h2 : leq (S y) k =>
                   < leq (S x) k2  >
                   case h2_ := h2 in leq (S y) k2 of
                   | lS (x':=y) y' H' => lS x y' (leq_trans x y y' H H')
                   end
    end.


print leq_trans.
