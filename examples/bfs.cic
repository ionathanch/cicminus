{- See Abel & Pientka, ICFP 2013 -}

-- data nat : Type := O : nat | S : nat -> nat.

codata cotree (A ++: Type) : Type :=
  node : A -> cotree A -> cotree A -> cotree A.

codata stream (A ++:Type) : Type :=
  ccons : A -> stream A -> stream A.


cofixpoint bf2 (A : Type) (xs : stream* (stream A)) : stream* (stream A) :=
      <stream (stream A)>
        case xs of
                | ccons xs' ys => <stream (stream A)>
                                  case xs' of
                                    | ccons x' xs'' => ccons (stream A) xs'' (bf2 A (bf2 A ys))
                                  end
             end.

check bf2.

cofixpoint bf1 (A : Type) (xs : stream* (stream A)) : cotree* A :=
      <cotree A>
        case xs of
                | ccons xs' ys => <cotree A>
                                  case xs' of
                                    | ccons x' xs'' => node A x' (bf1 A ys) (bf1 A (bf2 A ys))
                                  end
             end.

check bf1.


define bfp2 := fun A : Type =>
  cofix bfp2 (xs : stream* A) : stream* (stream A) :=
    <stream (stream A)>
    case xs of
    | ccons x xs' => ccons (stream A) xs' (bf2 A (bf2 A (bfp2 (ccons A x xs'))))
    end.

define bfp1 := fun A : Type => fun xs : stream A => bf1 A (ccons (stream A) xs (bfp2 A xs)).


check bfp2.
check bfp1.

define zeros := cofix zeros : stream* nat := ccons nat 0 zeros.
define nats := cofix nats (n : nat) : stream* nat := ccons nat n (nats (S n)).

define zt := cofix zt : cotree* nat := node nat 0 zt zt.

define force := fun (A : Type) (t : cotree A) =>
  <cotree A> case t of
    | node x y z => node A x y z
  end.

define force2 := fun (t : cotree nat) =>
  <cotree nat> case t of
    | node x t1 t2 => <cotree nat> case t1 of
                    | node y t3 t4 => <cotree nat> case t2 of
                                      | node z t5 t6 => node nat x (node nat y zt zt) (node nat z zt zt)
                                      end
                   end
  end.

check force2.

eval force nat (bfp1 nat (nats 0)).
