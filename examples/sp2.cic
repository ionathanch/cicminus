-- data nat : Type := O : nat | S : nat -> nat.

codata stream (A ++:Type) : Type :=
  ccons : A -> stream A -> stream A.

data SPi (X ++: Type) (A : Type) (B : Type) : Type :=
| get : (A -> SPi X A B) -> SPi X A B
| put : B -> X -> SPi X A B.

codata SPc (A : Type) (B : Type) : Type :=
| out : SPi (SPc A B) A B -> SPc A B.

-- check fun (A B C : Type) (f : A -> SPi C A B) => get C A B f.


define runc :=
  fun A B : Type =>
  cofix runc (sp : SPc* A B) (xs: stream A) : stream* B :=
      < stream B > case sp of
      | out spi =>
      ( fix run (sp : SPi (SPc A B) A B) (zs: stream A) {rec sp}: stream B :=
        < stream B >
        case sp of
        | get f => < stream B > case xs of
                   | ccons y ys => run (f y) ys
                   end
        | put w sp' => ccons B w (runc sp' zs)
        end
       ) spi xs
       end.


cofixpoint runc2 (A : Type) (B:Type) (sp : SPc* A B) (xs: stream A) : stream* B :=
  < stream B > case sp of
  | out spi =>
  ( fix run (sp : SPi* (SPc A B) A B) (zs: stream A) : stream B :=
    < stream B >
    case sp of
    | get f => < stream B > case xs of
               | ccons y ys => run (f y) ys
               end
    | put w sp' => ccons B w (runc2 A B sp' zs)
    end
    ) spi xs
  end.


check runc.

check runc2.
