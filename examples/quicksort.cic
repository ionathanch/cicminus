data list (A : Type) : Type :=
| nil : list A
| cons : A -> list A -> list A.

data bool : Type := true : bool | false : bool.

define filter := fun (A : Type) (f : A -> bool) =>
                 fix 1 filter : list* A -> list* A :=
                 fun (l : list A) =>
                 < list A > case l of
                            | nil => nil A
                            | cons h t => < list A > case f h of
                                          | true => cons A h (filter t)
                                          | false => filter t
                                          end
                            end.


define append := fun (A : Type) =>
                 fix 1 append : list* A -> list A -> list A :=
                 fun (l1 : list A) (l2 : list A) =>
                 < list A > case l1 of
                            | nil => l2
                            | cons h t => cons A h (append t l2)
                            end.


assume A : Type.
assume leq : A -> A -> bool.

define not := fun b : bool => < bool > case b of true => false | false => true end.

define geq := fun (x : A) (y : A) => not (leq x y).

define quicksort := fix 1 qsort : list* A -> list A :=
                    fun (l : list A) =>
                    < list A > case l of
                               | nil => nil A
                               | cons h t =>
                               append A (filter A (leq h) t)
                               (cons A h (filter A (geq h) t))
                               end.

check quicksort.
