data list (A : Type) : Type :=
| nil : list A
| cons : A -> list A -> list A.

data bool : Type := true : bool | false : bool.

fixpoint filter (A : Type) (f : A -> bool) (l : list* A) : list* A :=
                 < list A > case l of
                            | nil => nil A
                            | cons h t => < list A > case f h of
                                          | true => cons A h (filter A f t)
                                          | false => filter A f t
                                          end
                            end.


define append := fun (A : Type) =>
                 fix append (l1 : list* A) (l2 : list A) : list A :=
                 < list A > case l1 of
                            | nil => l2
                            | cons h t => cons A h (append t l2)
                            end.


assume A : Type.
assume leq : A -> A -> bool.

define not := fun b : bool => < bool > case b of true => false | false => true end.

define geq := fun (x : A) (y : A) => not (leq x y).

define quicksort := fix qsort (l : list* {-15-} A) : list {-16-} A :=
                    < list{-18-} A > case l {-17-}  of
                               | nil => nil{-19-} A
                               | cons h t =>
                               append A (qsort (filter A (leq h) t))
                               (cons {-20-} A h (qsort (filter A (geq h) t)))
                               end.

print filter.

check quicksort.
