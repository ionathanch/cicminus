data nat : Type := O : nat | S : nat -> nat.

codata stream (A ++:Type) : Type :=
   ccons : A -> stream A -> stream A.

define head : forall A:Type, stream A -> A :=
   Î» (A:Type) (xs:stream A) =>
      <A> case xs of
        ccons h t => h
      end.

define tail : forall A:Type, stream A -> stream A :=
   Î» (A:Type) (xs:stream A) =>
      <stream A> case xs of
        ccons h t => t
      end.

define ones : stream nat :=
  cofix ones : stream* nat := ccons nat O ones.

check head.

check ones.

eval (head nat ones).
eval (tail nat ones).
