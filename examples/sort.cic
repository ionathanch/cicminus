-- check Type.

-- data ex (P : Type -> Prop) : Type :=
--   intro : forall X:Type, P X -> ex P.

-- check ex : (Type -> Prop) -> Type.
-- check ( λ (P: Type -> Prop) (X: Type) (H: P X) => intro P X H).

define type := λ (T: Type) (_ : T) => T.
check (type (Type -> Type) (type Type)).

-- define ident := λ (T : Type) (x : T) => x.

-- check ident (Type -> Type) (ident Type).