data nat : Type := O : nat | S : nat -> nat.

data vec (A : Type) : nat -> Type :=
| vnil : vec A 0
| vcons : forall (n : nat), A -> vec A n -> vec A (S n).


define t1 := fun (A : Type) (n : nat) (v : vec A (S n)) =>
             < vec A n0 > case v1 := v in [(n0 : nat)] vec (S n0) of
                          | vnil => O
                          end.

check t1.
